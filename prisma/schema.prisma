// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ServerTable {
  serverId            String                @id @unique
  serverName          String
  guildId             String?
  guildName           String?
  strikeResetPeriod   String? // Stores ISO 8601 duration (e.g., "P3W")
  lastStrikeReset     DateTime?
  triggerPhrase       String?
  guildResetTime      DateTime?
  ticketStrikesActive Boolean?              @default(true)
  createdDate         DateTime
  updatedDate         DateTime
  members             GuildMembersTable[]
  channels            GuildChannelsTable?
  limits              GuildLimitsTable?
  roles               GuildRolesTable?
  GuildStrikeValues   GuildStrikeValues[]
  MemberStrikeReasons MemberStrikeReasons[]
}

model GuildChannelsTable {
  serverId               String      @unique
  strikeChannelName      String
  strikeChannelId        String      @unique
  strikeLimitChannelName String
  strikeLimitChannelId   String      @unique
  ticketChannelName      String
  ticketChannelId        String      @unique
  createdDate            DateTime
  updatedDate            DateTime
  server                 ServerTable @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
}

model GuildLimitsTable {
  serverId    String      @id @unique
  ticketLimit Int
  strikeLimit Int
  createdDate DateTime
  updatedDate DateTime
  server      ServerTable @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
}

model GuildRolesTable {
  serverId            String      @id @unique
  guildRoleId         String      @unique
  guildRoleName       String      @unique
  absenceRoleId       String      @unique
  absenceRoleName     String
  strikeLimitRoleId   String      @unique
  strikeLimitRoleName String
  createdDate         DateTime
  updatedDate         DateTime
  server              ServerTable @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
}

model GuildMembersTable {
  memberId                String                @id
  name                    String
  allyCode                String?
  playerName              String?
  playerId                String?
  username                String?
  strikes                 Int                   @default(0)
  strikeReasons           MemberStrikeReasons[]
  lifetimeStrikes         Int
  absent                  Boolean
  currentAbsenceStartDate DateTime?
  totalAbsenceDuration    Int?
  createdDate             DateTime
  updatedDate             DateTime
  server                  ServerTable           @relation(fields: [serverId], references: [serverId], onDelete: Cascade)
}

model MemberStrikeReasons {
  id       Int               @id @default(autoincrement())
  serverId String
  name     String
  uniqueId String
  date     DateTime
  active   Boolean
  reason   String
  member   GuildMembersTable @relation(fields: [memberId], references: [uniqueId], onDelete: Cascade)
  server   ServerTable       @relation(fields: [serverId], references: [serverId])

  @@unique([uniqueId, date, reason], name: "unique_reason")
}
